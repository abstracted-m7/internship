1. Voice Assistance : 
Key Features Implemented :

    Respond to Greetings: The assistant responds to "hello" or similar greetings.
    Tell the Current Time: The assistant tells the current time.
    Tell the Current Date: The assistant tells the current date.
    Search the Web: The assistant performs a web search based on the user's query.

Usage:

    Greeting: Say "hello" or a similar greeting.
    Time: Say "time" or "what time is it".
    Date: Say "date" or "what is the date".
    Web Search: Say "search for [your query]".

Explain:
    Initialization:
        Speech Recognition: The speech_recognition library is initialized using sr.Recognizer(), which will be used to recognize speech input from the microphone.
        Text-to-Speech Engine: The pyttsx3 library is initialized with pyttsx3.init() to convert text to speech, allowing the assistant to speak responses.

    Speak Function:
        The speak function takes a text input and uses the TTS engine to convert it to speech. It runs the tts_engine.say(text) method followed by tts_engine.runAndWait() to ensure the speech is completed.

    Listen Function:
        The listen function captures audio input from the microphone. It uses recognizer.adjust_for_ambient_noise(source) to adapt to background noise, then listens to the source and converts the audio to text using recognizer.recognize_google(audio).
        If the recognition fails due to unknown values or request errors, appropriate messages are spoken back to the user.

    Response Functions:
        Greeting Response: respond_to_greeting simply makes the assistant speak a greeting.
        Tell Time: tell_time fetches the current time using datetime.datetime.now(), formats it, and speaks it.
        Tell Date: tell_date fetches the current date, formats it, and speaks it.
        Web Search: search_web constructs a Google search URL with the query and opens it in the default web browser, then speaks the action performed.

    Command Handling:
        The handle_command function processes the recognized command and calls the appropriate response function based on keywords found in the command.
        It checks for "hello", "time", "date", and "search for" to determine the action to take.
        If the command includes "search for", it extracts the query from the command and performs a web search.

    Main Loop:
        The main part of the program runs in a loop. It starts by speaking a greeting, then continuously listens for commands.
        When a command is recognized, it calls handle_command to process the command and respond accordingly.

Points to Consider

    Error Handling: The listen function includes error handling to manage unrecognized or failed speech recognition attempts gracefully.
    Command Flexibility: The handle_command function uses simple keyword checks. This can be expanded with more sophisticated natural language processing if needed.
    Continuous Listening: The main loop continuously listens for commands, making the assistant always ready to respond.



2. BMI CALCULATOR : 

Explanation

    Calculate BMI: The function calculate_bmi computes the BMI given weight and height.
    Save Data: The function save_data appends the user's data to a DataFrame and saves it to a CSV file.
    Load Data: The function load_data loads existing data from a CSV file on startup.
    Show History: The function show_history displays a user's historical BMI data.
    Plot Trend: The function plot_trend plots a user's BMI trend over time using matplotlib.

Usage

    Enter Name, Weight, and Height: Fill in the fields and click "Calculate BMI".
    Show History: Enter the name and click "Show History" to view historical BMI data.
    Plot Trend: Enter the name and click "Plot Trend" to visualize the BMI trend over time.

